{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","localStorage","getItem","prompt","length","getNewPrompt","_this2","fetch","then","response","json","setState","english","setItem","clear","newText","_this3","now","react_default","a","createElement","Fragment","Navbar_default","bg","variant","Brand","href","Toggle","Collapse","className","Button_default","onClick","onNewText","Container_default","Row_default","Col_default","App_MyEditor","width","handleChange","ProgressBar_default","animated","label","concat","onSave","Component","MyEditor","_this4","lib_default","value","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.804a7e52.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Navbar from 'react-bootstrap/Navbar';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Button from 'react-bootstrap/Button';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: localStorage.getItem('text') || '',\n      prompt: localStorage.getItem('prompt') || ''\n    };\n  }\n\n  componentDidMount() {\n      if(this.state.prompt.length===0) {\n        this.getNewPrompt();\n      }\n  }\n\n  getNewPrompt() {\n      fetch('https://www.ineedaprompt.com/dictionary/default/prompt?q=adj+noun+adv+verb+noun+location')\n      .then((response) => response.json())\n      .then((prompt) => {\n        this.setState({text: this.state.text, prompt: prompt.english});\n        localStorage.setItem('prompt', prompt.english);\n      });\n    }\n\n  onSave() {\n    localStorage.setItem('text', this.state.text);\n  }\n\n  onNewText() {\n    localStorage.clear();\n    this.setState({text: '', prompt: ''});\n    this.getNewPrompt();\n  }\n\n  handleChange(newText) {\n    this.setState({text: newText, prompt: this.state.prompt});\n  }\n\n  render() {\n    let now = ((this.state.text.length)/500) * 100;\n    return (\n      <>\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">\n      Deans writing prompts\n    </Navbar.Brand>\n    <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n      <Button onClick={() => this.onNewText()}>New Text</Button>\n      </Navbar.Collapse>\n  </Navbar>\n      <Container>\n\n        <Row>\n          <Col>\n            {this.state.prompt}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n            <MyEditor\n              width=\"100%\"\n              text={this.state.text}\n              handleChange={(text) => this.handleChange(text)}/>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col >\n            <ProgressBar animated now={now} label={`${now}%`} />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col >\n            <Button onClick={() => this.onSave()}>Save</Button>\n          </Col>\n        </Row>\n      </Container>\n      </>\n    );\n  }\n}\n\nclass MyEditor extends Component {\n  render() {\n    return (\n      <ReactQuill\n        value={this.props.text}\n        onChange={(text) => this.props.handleChange(text)}/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}